1.comando para agregar un commit con fecha y nombre
    git commit -m " $(date +'%Y-%m-%d')"

2.comando de ejemplo para eliminar carpeta de git 
    git rm -r --cached clase/virtual_main/

3.comando para agregar dependencia a requerimiento
    pip freeze > requirements.txt

4.comandao para instalar requerimientos
    pip install -r requirements.txt

5.comandos para conflictos de git

    git config pull.rebase false (merge)

Descripción: Esta opción hará que un git pull combine los cambios remotos con los locales mediante un "merge" o fusión. Esto crea un nuevo commit de merge que une ambos historiales.
Usar cuando: Quieres mantener el historial de los commits tal como está, sin alterar el orden ni reescribir commits. Es útil cuando prefieres ver exactamente cómo se fusionaron los cambios, 
pero puede dejar el historial más complicado si hay muchos merges.

    git config pull.rebase true (rebase)

Descripción: En lugar de fusionar, el git pull aplicará tus cambios locales en la cima de los cambios remotos, reorganizando el historial de commits.
Usar cuando: Prefieres un historial más limpio y lineal. Esto reescribe la historia para que parezca que tus cambios fueron aplicados después de los cambios remotos, evitando commits de merge. Sin embargo, debes tener cuidado si ya has compartido tus cambios locales, 
ya que el rebase reescribe el historial.

    git config pull.ff only (fast-forward only)

Descripción: Solo hará el pull si puede avanzar el historial sin tener que fusionar ni reescribir (es decir, solo si no hay commits locales y puedes "mover" tu puntero hacia adelante directamente).
Usar cuando: Quieres evitar conflictos y asegurar que tu historial local siempre se mantenga sin divergencias. Es útil cuando sabes que no has hecho ningún cambio local que necesite ser fusionado.

Para aplicar alguna de estas opciones temporalmente durante el pull, podrías usar:

    git pull --rebase       ////    git rebase --abort  //// git rebase --continue
    git pull --no-rebase
    git pull --ff-only

6. !FORZAR CAMBIOS REMOTOS 

    git fetch origin
    git reset --hard origin/main

7. !FORZAR UN PULL 

    git pull --force

8. !FORZAR UN COMMIT EN ESPECIFICO 

    git reflog
    git reset --hard def5678  //// git reset --hard HEAD@{1}

9. comando para un cambio temporal

    git stash

10. comando para mapera procesos en puertos 
 
    sudo lsof -i :4200
    kill -9 PID

11. Aplicar cambios de un commit remoto especifico mas una carpeta especifica 

    git fetch origin
    git checkout b8c8ee067f4bc80bad333689551f25535b1eab12 -- frontend-Django1/
    git log origin/<nombre_de_la_rama>
